{"version":3,"sources":["components/CollisionComponent.tests.js"],"names":[],"mappings":"AAAA;AACA,0D;AACA,+F;AACA,8C;AACA,4B;;AAEA,eAAK,MAAL;;AAEA,SAAS,oBAAT,EAA+B,YAAK;AAClC,WAAS,YAAT,EAAuB,YAAM;AAC3B,6CAAyC,YAAM;AAC7C,UAAM,qBAAqB,kCAA3B;AACA,UAAM,SAAS,sBAAf;AACA,aAAO,YAAP,CAAoB,kBAApB;;AAEA,UAAI,SAAS,EAAb;AACA,UAAM,cAAc;AAClB,YADkB,gBACb,KADa,EACN;AACV,mBAAS,KAAT,CACD,CAHiB,EAApB;;;AAKA,yBAAmB,UAAnB,CAA8B,EAAC,wBAAD,EAA9B;AACA,aAAO,MAAP,CAAc,GAAd,CAAkB,EAAC,MAAM,iBAAO,cAAd,EAA8B,QAAQ,MAAtC,EAAlB,EACD,CAbD;;;AAeA,+DAA2D,YAAM;AAC/D,UAAM,qBAAqB,kCAA3B;AACA,UAAM,SAAS,sBAAf;AACA,aAAO,YAAP,CAAoB,kBAApB;;AAEA,UAAI,iBAAiB,MAArB;AACA,UAAM,cAAc;AAClB,YADkB,gBACb,KADa,EACN;AACV,iBAAO,cAAP,CACD,CAHiB,EAApB;;;AAKA,UAAM,SAAS,mBAAmB,UAAnB,CAA8B,EAAC,wBAAD,EAA9B,CAAf;AACA,aAAO,MAAP,CAAc,KAAd,CAAoB,cAApB,EACD,CAbD,EAeD,CA/BD;;;;;AAiCA,WAAS,UAAT,EAAqB,YAAM;AACzB,OAAG,oCAAH,EAAyC,YAAM;AAC7C,UAAM,qBAAqB,kCAA3B;AACA,yBAAmB,QAAnB,CAA4B,IAA5B,CAAiC,2BAAS,QAAQ,SAAR,KAAsB,iBAAO,IAAtC,EAAjC,EAA6E,MAA7E,CAAoF,EAApF,CAAuF,EAAvF,CACD,CAHD;;;AAKA,OAAG,wCAAH,EAA6C,YAAM;AACjD,UAAM,qBAAqB,kCAA3B;AACA,yBAAmB,QAAnB,CAA4B,IAA5B,CAAiC,2BAAS,QAAQ,SAAR,KAAsB,iBAAO,cAAtC,EAAjC,EAAuF,MAAvF,CAA8F,EAA9F,CAAiG,EAAjG,CACD,CAHD,EAID,CAVD,EAWD,CA7CD","file":"components/CollisionComponent.tests.js","sourcesContent":["'use strict';\r\nimport CollisionComponent from './CollisionComponent';\r\nimport events from '/events';\r\nimport Entity from 'shattered-lib/Entity';\r\nimport chai from 'chai';\r\n\r\nchai.should();\r\n\r\ndescribe('CollisionComponent', ()=> {\r\n  describe('onPosition', () => {\r\n    it(`should emit a willNotCollide event`, () => {\r\n      const collisionComponent = new CollisionComponent();\r\n      const entity = new Entity();\r\n      entity.addComponent(collisionComponent);\r\n\r\n      let result = {};\r\n      const destination = {\r\n        emit(event) {\r\n          result = event;\r\n        }\r\n      };\r\n      collisionComponent.onPosition({destination});\r\n      result.should.eql({name: events.willNotCollide, entity: entity});\r\n    });\r\n\r\n    it(`should return the result of the willNotCollide event`, () => {\r\n      const collisionComponent = new CollisionComponent();\r\n      const entity = new Entity();\r\n      entity.addComponent(collisionComponent);\r\n\r\n      let expectedResult = 'test';\r\n      const destination = {\r\n        emit(event) {\r\n          return expectedResult;\r\n        }\r\n      };\r\n      const result = collisionComponent.onPosition({destination});\r\n      result.should.equal(expectedResult);\r\n    });\r\n\r\n  });\r\n\r\n  describe('Handlers', () => {\r\n    it('should listen to onPosition events', () => {\r\n      const collisionComponent = new CollisionComponent();\r\n      collisionComponent.handlers.find(handler=>handler.eventName === events.move).should.be.ok;\r\n    });\r\n\r\n    it('should listen to willNotCollide events', () => {\r\n      const collisionComponent = new CollisionComponent();\r\n      collisionComponent.handlers.find(handler=>handler.eventName === events.willNotCollide).should.be.ok;\r\n    });\r\n  });\r\n});\r\n"],"sourceRoot":"/source/"}