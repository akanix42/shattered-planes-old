{"version":3,"sources":["Attributes.tests.js"],"names":[],"mappings":"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","file":"Attributes.tests.js","sourcesContent":["'use strict';\r\nimport chai from 'chai';\r\nimport jsonc from 'jsonc';\r\nimport Attributes, {Attribute, AttributeModifiers} from './Attributes.js';\r\n\r\nchai.should();\r\n\r\ndescribe('Attributes', () => {\r\n\r\n  describe('constructor', ()=> {\r\n    it('should work with no parameters', () => {\r\n      const attributes = new Attributes();\r\n      attributes.should.be.ok;\r\n    });\r\n\r\n    it('should instantiate each supplied attribute', () => {\r\n      const initialAttributes = {\r\n        health: 10,\r\n        speed: 5\r\n      };\r\n      const attributes = new Attributes(initialAttributes);\r\n      attributes.health.current.should.equal(initialAttributes.health);\r\n      attributes.speed.current.should.equal(initialAttributes.speed);\r\n    });\r\n\r\n  });\r\n\r\n  describe('add', ()=> {\r\n\r\n    it('should add the supplied attribute', () => {\r\n      const attributes = new Attributes();\r\n      const speed = 5;\r\n      attributes.add('speed', speed);\r\n      attributes.speed.current.should.equal(speed);\r\n\r\n    });\r\n\r\n  });\r\n\r\n});\r\n\r\ndescribe('Attribute', () => {\r\n  describe('constructor', ()=> {\r\n    it('should instantiate the attribute with the supplied name, value, and maxValue', () => {\r\n      const attribute = new Attribute('test', 3, 4);\r\n      attribute.name.should.equal('test');\r\n      attribute._base.should.equal(3);\r\n      attribute._baseMax.should.equal(4);\r\n    });\r\n  });\r\n\r\n  describe('get base()', ()=> {\r\n    it('should return the base value', () => {\r\n      const attribute = new Attribute();\r\n      attribute._base = 5;\r\n    });\r\n  });\r\n\r\n  describe('set base()', ()=> {\r\n    it('should set the base value to no more than the baseMax', () => {\r\n      const attribute = new Attribute();\r\n      attribute.baseMax = 5;\r\n      attribute.base = 6;\r\n      attribute.base.should.equal(5);\r\n    });\r\n  });\r\n\r\n  describe('get current()', ()=> {\r\n    it('should return the base value when no modifiers have been added', () => {\r\n      const attribute = new Attribute();\r\n      attribute.base = 5;\r\n      attribute.current.should.equal(5);\r\n    });\r\n\r\n    it('should return the base value + the sum of the modifiers', () => {\r\n      const attribute = new Attribute();\r\n      attribute.base = 5;\r\n      attribute.modifiers.add({}, 'test', 3)\r\n      attribute.modifiers.add({}, 'test', -1)\r\n      attribute.current.should.equal(7);\r\n    });\r\n  });\r\n\r\n});\r\ndescribe('AttributeModifiers', () => {\r\n\r\n  describe('add()', ()=> {\r\n    it('should add the modifier and recalculate the total', () => {\r\n      const modifiers = new AttributeModifiers();\r\n      modifiers.add({}, 'test', 2);\r\n      modifiers.total.should.equal(2);\r\n    });\r\n\r\n    it('should add multiple modifiers and recalculate the total', () => {\r\n      const modifiers = new AttributeModifiers();\r\n      modifiers.add({}, 'test', 2);\r\n      modifiers.add({}, 'test', -1);\r\n      modifiers.total.should.equal(1);\r\n    });\r\n\r\n    it('should replace the existing modifier and recalculate the total', () => {\r\n      const modifiers = new AttributeModifiers();\r\n      const component = {};\r\n      modifiers.add(component, 'test', 1);\r\n      modifiers.total.should.equal(1);\r\n      modifiers.add(component, 'test', 2);\r\n      modifiers.total.should.equal(2);\r\n    });\r\n\r\n    it('should remove the existing modifier and recalculate the total', () => {\r\n      const modifiers = new AttributeModifiers();\r\n      const component = {};\r\n      modifiers.add(component, 'test', 1);\r\n      modifiers.total.should.equal(1);\r\n      modifiers.remove(component, 'test');\r\n      modifiers.total.should.equal(0);\r\n    });\r\n\r\n  });\r\n\r\n  describe('set base()', ()=> {\r\n    it('should set the base value to no more than the baseMax', () => {\r\n      const attribute = new Attribute();\r\n      attribute.baseMax = 5;\r\n      attribute.base = 6;\r\n      attribute.base.should.equal(5);\r\n    });\r\n  });\r\n\r\n  describe('get current()', ()=> {\r\n    it('should return the base value when no modifiers have been added', () => {\r\n      const attribute = new Attribute();\r\n      attribute.base = 5;\r\n      attribute.current.should.equal(5);\r\n    });\r\n\r\n    it('should return the base value + the sum of the modifiers', () => {\r\n      const attribute = new Attribute();\r\n      attribute.base = 5;\r\n      attribute.modifiers.add({}, 'test', 3)\r\n      attribute.modifiers.add({}, 'test', -1)\r\n      attribute.current.should.equal(7);\r\n    });\r\n  });\r\n\r\n});\r\n"],"sourceRoot":"/source/"}