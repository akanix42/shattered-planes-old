{"version":3,"sources":["SubscribedHandlers.js"],"names":[],"mappings":"AAAA,a;;AAEA,kD;;AAEqB,kB;AACnB,gCAAc;AACZ,SAAK,OAAL,GAAe,8BAAf;AACA,SAAK,qBAAL,GAA6B,IAAI,GAAJ,EAA7B;AACA,SAAK,gBAAL,GAAwB,EAAxB,CACD,C;;;AAEG,gB,EAAc;AAChB,WAAK,OAAL,CAAa,GAAb,CAAiB,aAAa,SAA9B;;AAEA,UAAM,WAAW,KAAK,gBAAL,CAAsB,aAAa,SAAnC,MAAkD,KAAK,gBAAL,CAAsB,aAAa,SAAnC,IAAgD,EAAlG,CAAjB;AACA,eAAS,IAAT,CAAc,YAAd;AACA,eAAS,IAAT,CAAc,UAAC,aAAD,EAAgB,aAAhB,UAAkC,cAAc,QAAd,GAAyB,cAAc,QAAzE,EAAd;;AAEA,WAAK,qBAAL,CAA2B,GAA3B,CAA+B,aAAa,SAA5C,EACD,C;;;AAEI,S,EAAO;AACV,UAAI,CAAC,KAAK,OAAL,CAAa,GAAb,CAAiB,MAAM,IAAvB,CAAL;AACE;;AAEF,UAAM,gBAAgB,KAAK,gBAAL,CAAsB,MAAM,IAA5B,CAAtB;AACA,WAAK,IAAI,eAAe,CAAxB,EAA2B,eAAe,cAAc,MAAxD,EAAgE,cAAhE,EAAgF;AAC9E,YAAI,UAAU,cAAc,YAAd,CAAd;AACA,YAAI,SAAS,QAAQ,QAAR,CAAiB,IAAjB,CAAsB,QAAQ,SAAR,IAAqB,IAA3C,EAAiD,KAAjD,CAAb;AACA,YAAI,WAAW,KAAf;AACE,cADF;;AAGE,gBAAQ,UAAU,KAAlB,CACH;;AACD,aAAO,KAAP,CACD,C;;;AAEe,a,EAAW;AACzB,UAAI,CAAC,KAAK,qBAAL,CAA2B,GAA3B,CAA+B,SAA/B,CAAL;AACE;;AAEF,gBAAU,QAAV,CAAmB,OAAnB,CAA2B,2BAAS,MAAK,MAAL,CAAY,OAAZ,CAAT,EAA3B;AACA,WAAK,qBAAL,CAA2B,MAA3B,CAAkC,SAAlC,EAED,C;;;;AAEM,gB,EAAc;AACnB,UAAI,CAAC,KAAK,OAAL,CAAa,GAAb,CAAiB,aAAa,SAA9B,CAAL;AACE;;AAEF,UAAM,WAAW,KAAK,gBAAL,CAAsB,aAAa,SAAnC,CAAjB;AACA,eAAS,MAAT,CAAgB,SAAS,OAAT,CAAiB,YAAjB,CAAhB,EAAgD,CAAhD;;AAEA,WAAK,OAAL,CAAa,MAAb,CAAoB,aAAa,SAAjC,EACD,C,qDAlDkB,kB","file":"SubscribedHandlers.js","sourcesContent":["'use strict';\r\n\r\nimport IncrementalSet from './IncrementalSet';\r\n\r\nexport default class SubscribedHandlers {\r\n  constructor() {\r\n    this._events = new IncrementalSet();\r\n    this._subscribedComponents = new Set();\r\n    this._handlersByEvent = {};\r\n  }\r\n\r\n  add(subscription) {\r\n    this._events.add(subscription.eventName);\r\n\r\n    const handlers = this._handlersByEvent[subscription.eventName] || (this._handlersByEvent[subscription.eventName] = []);\r\n    handlers.push(subscription);\r\n    handlers.sort((subscriptionA, subscriptionB) => subscriptionA.priority - subscriptionB.priority);\r\n\r\n    this._subscribedComponents.add(subscription.component);\r\n  }\r\n\r\n  emit(event) {\r\n    if (!this._events.has(event.name))\r\n      return;\r\n\r\n    const eventHandlers = this._handlersByEvent[event.name];\r\n    for (let handlerIndex = 0; handlerIndex < eventHandlers.length; handlerIndex++) {\r\n      let handler = eventHandlers[handlerIndex];\r\n      let result = handler.callback.call(handler.component || this, event);\r\n      if (result === false)\r\n        break;\r\n      else\r\n        event = result || event;\r\n    }\r\n    return event;\r\n  }\r\n\r\n  removeComponent(component) {\r\n    if (!this._subscribedComponents.has(component))\r\n      return;\r\n\r\n    component.handlers.forEach(handler=>this.remove(handler));\r\n    this._subscribedComponents.delete(component);\r\n\r\n  }\r\n\r\n  remove(subscription) {\r\n    if (!this._events.has(subscription.eventName))\r\n      return;\r\n\r\n    const handlers = this._handlersByEvent[subscription.eventName];\r\n    handlers.splice(handlers.indexOf(subscription), 1);\r\n\r\n    this._events.delete(subscription.eventName);\r\n  }\r\n}\r\n"],"sourceRoot":"/source/"}