{"version":3,"sources":["generators/LevelGenerator.tests.js"],"names":[],"mappings":"AAAA,a;AACA,4B;AACA,kD;AACA,oD;AACA,+B;;AAEA,eAAK,MAAL;;AAEA,SAAS,gBAAT,EAA2B,YAAM;;AAE/B,WAAS,UAAT,EAAqB,YAAK;AACxB,OAAG,yBAAH,EAA8B,YAAK;AACjC,UAAM,YAAY,EAAlB;AACA,UAAM,YAAY,EAAE,OAAO,MAAT,EAAiB,UAAU,4BAAM,SAAN,EAA3B,EAAlB;AACA,UAAM,iBAAiB,8BAAvB;AACA,qBAAe,YAAf,CAA4B,SAA5B;;AAEA,UAAM,QAAQ,eAAe,cAAf,EAAd;AACA,YAAM,MAAN,CAAa,KAAb,CAAmB,SAAnB,EACD,CARD;;;AAUA,qEAAgE,YAAK;AACnE,UAAM,eAAe;AACnB,cAAM,MADa;AAEnB,oBAAY,CAAC,YAAD,EAAe,YAAf,CAFO,EAArB;;AAIA,UAAM,kBAAkB,EAAxB,CALmE;AAM7D,YAN6D;AAOpD,mBAPoD,EAOzC;AACtB,4BAAgB,IAAhB,CAAqB,SAArB,EACD,CATgE;;;AAWnE,UAAM,kBAAkB,+BAAxB;AACA,sBAAgB,OAAhB,GAA0B,MAA1B;AACA,sBAAgB,UAAhB,CAA2B,aAAa,IAAxC,IAAgD,YAAhD;AACA,sBAAgB,mBAAhB,GAAsC,EAAE,UAAU,yCAAgB,EAAC,4BAAD,EAAhB,EAAZ,EAAtC;;AAEA,sBAAgB,QAAhB,CAAyB,MAAzB;AACA,sBAAgB,CAAhB,EAAmB,MAAnB,CAA0B,GAA1B,CAA8B,EAAC,eAAc,YAAf,EAA9B;AACA,sBAAgB,CAAhB,EAAmB,MAAnB,CAA0B,GAA1B,CAA8B,EAAC,eAAc,YAAf,EAA9B,EACD,CAnBD,EAoBD,CA/BD;;;;AAiCA,WAAS,sBAAT,EAAiC,YAAK;AACpC,OAAG,8BAAH,EAAmC,YAAK;AACtC,sBAAI,GAAJ,CAAQ,OAAR,CAAgB,OAAhB;AACA,UAAM,YAAY,EAAE,OAAO,GAAT,EAAlB;AACA,UAAM,aAAa,EAAE,OAAO,GAAT,EAAnB;AACA,UAAM,aAAa,EAAE,OAAO,GAAT,EAAnB;;AAEA,UAAM,iBAAiB,8BAAvB;AACA,qBAAe,YAAf,CAA4B,SAA5B;AACA,qBAAe,YAAf,CAA4B,UAA5B;AACA,qBAAe,YAAf,CAA4B,UAA5B;AACA,UAAI,kBAAkB,eAAe,kBAAf,EAAtB;AACA,sBAAgB,MAAhB,CAAuB,KAAvB,CAA6B,SAA7B;AACA,wBAAkB,eAAe,kBAAf,EAAlB;AACA,sBAAgB,MAAhB,CAAuB,KAAvB,CAA6B,SAA7B;AACA,wBAAkB,eAAe,kBAAf,EAAlB;AACA,sBAAgB,MAAhB,CAAuB,KAAvB,CAA6B,UAA7B,EACD,CAhBD,EAiBD,CAlBD,EAoBD,CAvDD","file":"generators/LevelGenerator.tests.js","sourcesContent":["'use strict';\r\nimport chai from 'chai';\r\nimport LevelGenerator from './LevelGenerator';\r\nimport EntityGenerator from './EntityGenerator';\r\nimport ROT from 'rot-js';\r\n\r\nchai.should();\r\n\r\ndescribe('LevelGenerator', () => {\r\n\r\n  describe('generate', ()=> {\r\n    it('should generate a level', ()=> {\r\n      const testLevel = {};\r\n      const generator = { theme: 'test', generate: () => testLevel};\r\n      const levelGenerator = new LevelGenerator();\r\n      levelGenerator.addGenerator(generator);\r\n      \r\n      const level = levelGenerator.generateRandom();\r\n      level.should.equal(testLevel);\r\n    });\r\n\r\n    it(`should add all of the template's components to the entity`, ()=> {\r\n      const testTemplate = {\r\n        name: 'test',\r\n        components: ['component1', 'component2']\r\n      };\r\n      const addedComponents = [];\r\n      class Entity{\r\n        addComponent(component) {\r\n          addedComponents.push(component);\r\n        }\r\n      }\r\n      const entityGenerator = new EntityGenerator();\r\n      entityGenerator._Entity = Entity;\r\n      entityGenerator._templates[testTemplate.name] = testTemplate;\r\n      entityGenerator._componentGenerator = { generate: componentName=>({componentName})};\r\n\r\n      entityGenerator.generate('test');\r\n      addedComponents[0].should.eql({componentName:'component1'});\r\n      addedComponents[1].should.eql({componentName:'component2'});\r\n    });\r\n  });\r\n\r\n  describe('getRandomGenerator()', ()=> {\r\n    it('should return a random theme', ()=> {\r\n      ROT.RNG.setSeed(1345646);\r\n      const generator = { theme: '1'};\r\n      const generator2 = { theme: '2' };\r\n      const generator3 = { theme: '3'};\r\n\r\n      const levelGenerator = new LevelGenerator();\r\n      levelGenerator.addGenerator(generator);\r\n      levelGenerator.addGenerator(generator2);\r\n      levelGenerator.addGenerator(generator3);\r\n      let randomGenerator = levelGenerator.getRandomGenerator();\r\n      randomGenerator.should.equal(generator);\r\n      randomGenerator = levelGenerator.getRandomGenerator();\r\n      randomGenerator.should.equal(generator);\r\n      randomGenerator = levelGenerator.getRandomGenerator();\r\n      randomGenerator.should.equal(generator3);\r\n    });\r\n  });\r\n\r\n});\r\n"],"sourceRoot":"/source/"}