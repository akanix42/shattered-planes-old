{"version":3,"sources":["SubscribedHandlers.tests.js"],"names":[],"mappings":"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","file":"SubscribedHandlers.tests.js","sourcesContent":["'use strict';\r\nimport chai from 'chai';\r\nimport SubscribedHandlers from './SubscribedHandlers.js';\r\n\r\nchai.should();\r\n\r\ndescribe('SubscribedHandlers', () => {\r\n\r\n  describe('add', ()=> {\r\n    it('should add a handler', ()=> {\r\n      const subscriptions = new SubscribedHandlers();\r\n      const handler = {eventName: 'test', priority: 0, component: {}};\r\n\r\n      subscriptions.add(handler);\r\n      subscriptions._events.has(handler.eventName).should.be.true;\r\n    });\r\n  });\r\n\r\n  describe('emit', ()=> {\r\n\r\n    it(`should emit the event to all of that event's handlers`, ()=> {\r\n      const subscriptions = new SubscribedHandlers();\r\n      let handler1Called = false;\r\n      let handler2Called = false;\r\n      const handler1 = {eventName: 'test', priority: 0, component: {}, callback: event => handler1Called = true};\r\n      const handler2 = {eventName: 'test', priority: 0, component: {}, callback: event => handler2Called = true};\r\n\r\n      subscriptions.add(handler1);\r\n      subscriptions.add(handler2);\r\n\r\n      const event = {name:'test'};\r\n      subscriptions.emit(event);\r\n\r\n      handler1Called.should.be.true;\r\n      handler2Called.should.be.true;\r\n    });\r\n\r\n    it(`should pass the event to the handler's callback`, ()=> {\r\n      const subscriptions = new SubscribedHandlers();\r\n      let handledEvent;\r\n      const handler = {eventName: 'test', priority: 0, component: {}, callback: event => handledEvent = event};\r\n      const event = {name: 'test'};\r\n      subscriptions.add(handler);\r\n      subscriptions.emit(event);\r\n\r\n      handledEvent.should.equal(event);\r\n    });\r\n    \r\n    it(`should return the updated event from the handler's callback`, ()=> {\r\n      const subscriptions = new SubscribedHandlers();\r\n      let updatedEvent = {};\r\n      const handler = {eventName: 'test', priority: 0, component: {}, callback: event => updatedEvent};\r\n      const event = {name:'test'};\r\n      subscriptions.add(handler);\r\n      const result = subscriptions.emit(event);\r\n\r\n      result.should.equal(updatedEvent);\r\n    });\r\n    \r\n    it(`should return the original event if the callback returns undefined`, ()=> {\r\n      const subscriptions = new SubscribedHandlers();\r\n      const handler = {eventName: 'test', priority: 0, component: {}, callback: event => {}};\r\n      const event = {name:'test'};\r\n      subscriptions.add(handler);\r\n      const result = subscriptions.emit(event);\r\n\r\n      result.should.equal(event);\r\n    });\r\n\r\n  });\r\n\r\n  describe('remove', ()=> {\r\n\r\n    it('should remove a handler', ()=> {\r\n      const subscriptions = new SubscribedHandlers();\r\n      const handler = {eventName: 'test', priority: 0, component: {}};\r\n\r\n      subscriptions.add(handler);\r\n      subscriptions.remove(handler);\r\n      subscriptions._events.has(handler.eventName).should.be.false;\r\n    });\r\n\r\n    it('should remove the event only after all handlers for the event have been removed', ()=> {\r\n      const subscriptions = new SubscribedHandlers();\r\n      const handler1 = {eventName: 'test', priority: 0, component: {}};\r\n      const handler2 = {eventName: 'test', priority: 0, component: {}};\r\n\r\n      subscriptions.add(handler1);\r\n      subscriptions.add(handler2);\r\n      subscriptions.remove(handler1);\r\n      subscriptions._events.has(handler1.eventName).should.be.true;\r\n      subscriptions.remove(handler2);\r\n      subscriptions._events.has(handler2.eventName).should.be.false;\r\n    });\r\n\r\n  });\r\n\r\n  describe('removeComponent', ()=> {\r\n\r\n    it('should remove all of the components handlers', ()=> {\r\n      const subscriptions = new SubscribedHandlers();\r\n      const component = {\r\n        handlers: []\r\n      };\r\n      component.handlers.push({eventName: 'test', priority: 0, component});\r\n      component.handlers.push({eventName: 'test2', priority: 0, component});\r\n\r\n      subscriptions.add(component.handlers[0]);\r\n      subscriptions.add(component.handlers[1]);\r\n      subscriptions.removeComponent(component);\r\n\r\n      subscriptions._events.has(component.handlers[0].eventName).should.be.false;\r\n      subscriptions._events.has(component.handlers[1].eventName).should.be.false;\r\n    });\r\n\r\n  });\r\n});"],"sourceRoot":"/source/"}